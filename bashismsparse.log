possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
possible bashism in parseMfilename.sh line 22 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexM} ]]; then #if filename matches regex then it's a movie we want to work on!
possible bashism in parseMfilename.sh line 23 ($BASH_SOMETHING):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 23 (bash arrays, ${name[0|*|@]}):
	movie=${BASH_REMATCH[1]}; # movie name matches 1st regex match
possible bashism in parseMfilename.sh line 29 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 29 (should be 'b = a'):
				if [[ $movie == *"Departures"* ]]; then #hardcoded id's for movies
possible bashism in parseMfilename.sh line 31 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 31 (should be 'b = a'):
				elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 33 (alternative test command ([[ foo ]] should be [ foo ])):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 33 (should be 'b = a'):
				elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 39 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 49 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 53 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 55 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseMfilename.sh line 58 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 60 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 65 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 67 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 70 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 75 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 78 ('((' should be '$(('):
						((counter++))
possible bashism in parseMfilename.sh line 82 (${parm/?/pat[/str]}):
			movie=${movie//./ }
possible bashism in parseMfilename.sh line 89 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 89 (should be 'b = a'):
			if [[ $movie == *"Departures"* ]]; then
possible bashism in parseMfilename.sh line 91 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 91 (should be 'b = a'):
			elif [[ $movie == *"Pilgrim"* ]]; then
possible bashism in parseMfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 93 (should be 'b = a'):
			elif [[ $movie == *"Guide.to.the.Galaxy"*  ]]; then
possible bashism in parseMfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseMfilename.sh line 109 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseMfilename.sh line 113 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseMfilename.sh line 115 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseMfilename.sh line 118 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseMfilename.sh line 120 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 125 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 127 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseMfilename.sh line 130 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseMfilename.sh line 135 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseMfilename.sh line 138 ('((' should be '$(('):
					((counter++))
possible bashism in parseMfilename.sh line 142 (${parm/?/pat[/str]}):
		movie=${movie//./ }
possible bashism in parseMfilename.sh line 143 (echo -e):
		echo -e '[{"Movie":"'"${movie}"'", "ID":"'"${myID}"'", "Poster":"'"${myPoster}"'", "File":"'"${file}"'",'"${subStr}"']}]\n' > $dbNameMovie;
possible bashism in parseTVfilename.sh line 23 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "${filename}" =~ ${regexTV1} ]] || [[ "${filename}" =~ ${regexTV2} ]] || [[ "${filename}" =~ ${regexTV3} ]] || [[ "${filename}" =~ ${regexTV4} ]]; then
possible bashism in parseTVfilename.sh line 24 ($BASH_SOMETHING):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 24 (bash arrays, ${name[0|*|@]}):
	myShow=${BASH_REMATCH[1]};
possible bashism in parseTVfilename.sh line 25 (${parm/?/pat[/str]}):
	myShow=${myShow//./ }
possible bashism in parseTVfilename.sh line 26 ($BASH_SOMETHING):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 26 (bash arrays, ${name[0|*|@]}):
	mySeason=${BASH_REMATCH[2]};
possible bashism in parseTVfilename.sh line 27 ($BASH_SOMETHING):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 27 (bash arrays, ${name[0|*|@]}):
	myEpisode=${BASH_REMATCH[3]};
possible bashism in parseTVfilename.sh line 34 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 40 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 40 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 51 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 55 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 57 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 60 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 62 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 67 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 69 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 72 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 77 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 80 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 93 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 94 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 99 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 99 (should be 'b = a'):
						if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 115 (bash arrays, ${name[0|*|@]}):
					if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 119 (bash arrays, ${name[0|*|@]}):
					for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 121 (should be VAR="${VAR}foo"):
							subStr+=","
possible bashism in parseTVfilename.sh line 124 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 126 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 131 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 133 (alternative test command ([[ foo ]] should be [ foo ])):
							if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 136 (should be 'b = a'):
								if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 141 (should be VAR="${VAR}foo"):
								subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 144 ('((' should be '$(('):
						((counter++))
possible bashism in parseTVfilename.sh line 161 (alternative test command ([[ foo ]] should be [ foo ])):
			if [[ $myID =~ ^-?[0-9]+$ ]]; then #checks if ID is a number
possible bashism in parseTVfilename.sh line 162 (alternative test command ([[ foo ]] should be [ foo ])):
				if [[ ! -z "$TMDBapi" ]] && $getEpisodeName; then
possible bashism in parseTVfilename.sh line 167 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 167 (should be 'b = a'):
					if [[ "${myTitle}" == "null" ]]; then
possible bashism in parseTVfilename.sh line 183 (bash arrays, ${name[0|*|@]}):
				if [ "${#sub[@]}" -ge 1 ]; then
possible bashism in parseTVfilename.sh line 187 (bash arrays, ${name[0|*|@]}):
				for tempSub in "${sub[@]}"; do
possible bashism in parseTVfilename.sh line 189 (should be VAR="${VAR}foo"):
						subStr+=","
possible bashism in parseTVfilename.sh line 192 (alternative test command ([[ foo ]] should be [ foo ])):
					if [[ -f $tempSubNoExt".vtt" ]]; then
possible bashism in parseTVfilename.sh line 194 (should be 'b = a'):
						if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 199 (should be VAR="${VAR}foo"):
						subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 201 (alternative test command ([[ foo ]] should be [ foo ])):
						if [[ -f $tempSub ]]; then
possible bashism in parseTVfilename.sh line 204 (should be 'b = a'):
							if [ $lang == $tempSubNoExt ]; then
possible bashism in parseTVfilename.sh line 209 (should be VAR="${VAR}foo"):
							subStr+='{"subFile":"'"${tempSub}"'", "lang":"'"${lang}"'","label":"'"${lang}"'"}'
possible bashism in parseTVfilename.sh line 212 ('((' should be '$(('):
					((counter++))
possible bashism in parseTVfilename.sh line 219 (echo -e):
		echo -e '[\n{\n"Show": "'"${myShow}"'",\n"ID":"'"${myID}"'",\n "Poster":"'"${myPoster}"'", "Seasons":"'"${numSeasons}"'", "Episodes":[{"Season":"'"${mySeason}"'","Episode":"'"${myEpisode}"'","Title":"'"${myTitle}"'","File":"'"${file}"'",'"${subStr}"']}]}]\n' >> $dbNameTV;
